import numpy as np
import matplotlib.pyplot as plt

length_km = 1000  # Length of the grid in km
costs_per_km = {"wooden": 755_000, "concrete": 1_864_000, "hybrid": 1_198_000}
years = 20

def failure_probability(wind_speed, material):
    fragility_base = {"wooden": 2e-07, "concrete": 2e-08, "hybrid": 5e-08}
    return fragility_base[material] * np.exp(0.0834 * wind_speed)

# Hurricane categories and wind speeds
categories = {
    "Cat3": {"wind_speed": 120},
    "Cat4": {"wind_speed": 142},
    "Cat5": {"wind_speed": 180},
}
M4_speed = {
    "Cat3": {"wind_speed": 130},
    "Cat4": {"wind_speed": 157},
    "Cat5": {"wind_speed": 180},
}

models = {
    "Model1": {"Cat3": 0.08, "Cat4": 0.05, "Cat5": 0.01},
    "Model2": {"Cat3": 0.07, "Cat4": 0.06, "Cat5": 0.03},
}

def dynamic_model_3_4(year):
    return {
        "Cat3": 0.08 + 0.015 * year,
        "Cat4": 0.05 + 0.015 * year,
        "Cat5": 0.01 + 0.02 * year,
    }

# Discount rates
discount_rates = [0.02, 0.05]

# Calculate expected damages for a single year
def annual_expected_damage(material, model, year):
    annual_damage = 0
    if model in models:
        probabilities = models[model]
    else:  # Dynamic probabilities for Models 3 and 4
        probabilities = dynamic_model_3_4(year)
    for category, data in categories.items():
        prob = probabilities[category]
        wind_speed = data["wind_speed"]
        if model == "Model4":
            if category == "Cat3":
                #print("130")
                wind_speed = 130
            elif category == "Cat4":
                #print("157")
                wind_speed = 157
        failure_prob = failure_probability(wind_speed, material)
        rebuild_cost = costs_per_km[material] * length_km
        annual_damage += prob * failure_prob * rebuild_cost
    return annual_damage

def discounted_cost(material, model, discount_rate):
    total_damage = 0
    for year in range(1, years + 1):
        annual_damage = annual_expected_damage(material, model, year)
        total_damage += annual_damage / ((1 + discount_rate) ** year)
    construction_cost = costs_per_km[material] * length_km
    return construction_cost + total_damage

# array for results
results = {}
for material in costs_per_km.keys():
    for model in ["Model1", "Model2", "Model3", "Model4"]:
        for discount_rate in discount_rates:
            scenario = f"{material.capitalize()} - {model} - {int(discount_rate * 100)}%"
            results[scenario] = discounted_cost(material, model, discount_rate)



min_cost = min(results.values())

# use to compare to the min_regret_option
#regret = {scenario: cost - min_cost for scenario, cost in results.items()}

regret = {scenario: cost for scenario, cost in results.items()}
min_regret_option = min(regret, key=regret.get)


scenarios = list(regret.keys())
values = list(regret.values())

# show all the costs for all senarios
print(results)

plt.figure(figsize=(12, 8))
plt.barh(scenarios, values, color='skyblue')
plt.xlabel("Regret ($)", fontsize=14)
plt.ylabel("Scenario", fontsize=14)
plt.title("Regret for Each Scenario", fontsize=16)
plt.tight_layout()
plt.show()

results, min_regret_option

"""
for i in results:
    print(i)
print()
"""
#print(min_regret_option)

